/**
* DevExtreme (core/component.d.ts)
* Version: 19.2.13
* Build date: Fri Dec 03 2021
*
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
*/
import {
    dxElement
} from './element';

/**
 * Warning! This type is used for internal purposes. Do not import it directly.
 */
export interface ComponentOptions<T = Component> {
    /**
     * A function that is executed before the widget is disposed of.
     */
    onDisposing?: ((e: { component?: T }) => any);
    /**
     * A function used in JavaScript frameworks to save the widget instance.
     */
    onInitialized?: ((e: { component?: T, element?: dxElement }) => any);
    /**
     * A function that is executed after a widget option is changed.
     */
    onOptionChanged?: ((e: { component?: T, name?: string, fullName?: string, value?: any }) => any);
}
/**
 * A base class for all components and widgets.
 * Warning! This type is used for internal purposes. Do not import it directly.
 */
export default class Component {
    constructor(options?: ComponentOptions);
    /**
     * 
     */
    beginUpdate(): void;
    /**
     * 
     */
    endUpdate(): void;
    /**
     * 
     */
    instance(): this;
    off(eventName: string): this;
    off(eventName: string, eventHandler: Function): this;
    on(eventName: string, eventHandler: Function): this;
    on(events: any): this;
    /**
     * 
     */
    option(): any;
    /**
     * 
     */
    option(optionName: string): any;
    /**
     * 
     */
    option(optionName: string, optionValue: any): void;
    /**
     * 
     */
    option(options: any): void;
    /**
     * 
     */
    resetOption(optionName: string): void;
}
